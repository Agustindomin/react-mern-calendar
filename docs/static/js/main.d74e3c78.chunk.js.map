{"version":3,"sources":["types/types.js","reducers/uiReducer.js","reducers/calendarReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","hooks/useForm.js","helpers/fetch.js","helpers/prepareEvents.js","actions/events.js","actions/auth.js","components/auth/LoginScreen.js","components/ui/Navbar.js","helpers/calendar-messages-es.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","components/ui/AddNewFab.js","components/ui/DeletedEventFab.js","components/calendar/CalendarScreen.js","router/PublicRoute.js","router/PrivateRoute.js","router/AppRouter.js","CalendarApp.js","index.js"],"names":["types","initialState","modalOpen","events","activeEvent","checking","rootReducer","combineReducers","ui","state","action","type","calendar","payload","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","baseUrl","process","fetchSinToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchConToken","token","localStorage","getItem","prepareEvents","start","moment","toDate","end","eventAddNew","event","eventClearActiveEvent","eventUpdated","eventDeleted","eventsLoaded","checkingFinish","startLogout","dispatch","clear","logout","login","user","LoginScreen","useDispatch","lEmail","lPassword","formLoginValues","handleLoginInputChange","rName","rEmail","rPassword1","rPassword2","formRegisterValues","handleRegisterInputChange","className","onSubmit","preventDefault","validator","isEmail","isLength","email","password","a","resp","json","ok","setItem","Date","getTime","uid","Swal","fire","msg","title","text","icon","showCloseButton","placeholder","onChange","isEmpty","Navbar","useSelector","onClick","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","CalendarEvent","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minute","second","add","nowPlus1","clone","initEvent","notes","CalendarModal","titleValid","setTitleValid","formValues","setFormValues","useEffect","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","momentStart","momentEnd","isSameOrAfter","trim","length","getState","console","log","evento","_id","startAddNew","minDate","autoComplete","rows","AddNewFab","DeletedEventFab","locale","localizer","momentLocalizer","CalendarScreen","lastView","setLastView","eventos","startAccessor","endAccessor","eventPropGetter","isSelected","backgroundColor","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","onSelectSlot","selectable","view","components","PublicRoute","isLoggedIn","Component","component","rest","props","to","PrivateRoute","AppRouter","exact","path","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d74e3c78.chunk.js","sourcesContent":["export const types = {\r\n\r\n    uiOpenModal: '[ui] Open modal',\r\n    uiCloseModal: '[ui] Close modal',\r\n\r\n    \r\n    eventSetActive: '[event] Set active',\r\n    eventStartAddNew: '[event] Start Add New',\r\n    eventAddNew: '[event] Add new',\r\n    eventClearActiveEvent: '[event] Clear active event',\r\n    eventUpdated: '[event] Event updated',\r\n    eventDeleted: '[event] Event deleted',\r\n    eventLogout: '[event] Logout',\r\n\r\n    eventStartLoading: '[event] Start loading',\r\n    eventsLoaded: '[event] Events loaded',\r\n\r\n    authCheckingFinish: '[auth] Finish checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth] Login',\r\n    authStartRegister: '[auth] Start register',\r\n    authStartTokenRenew: '[auth] Start token renew',\r\n    authLogout: '[auth] Logout',\r\n    \r\n}","import { types } from \"../types/types\";\r\n\r\n\r\nconst initialState = {\r\n    modalOpen: false,\r\n}\r\n\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n   \r\n    switch ( action.type ) {\r\n        \r\n        case types.uiOpenModal:\r\n            \r\n            return {\r\n                ...state,\r\n                modalOpen: true\r\n            }\r\n    \r\n        case types.uiCloseModal:\r\n            \r\n            return {\r\n                ...state,\r\n                modalOpen: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n","// import moment from 'moment';\r\nimport { types } from '../types/types';\r\n\r\n// {\r\n//     id: 'jasju4h5h56jsmnd88',\r\n//     title: 'Cumpleaños del jefe',\r\n//     start: moment().toDate(),\r\n//     end: moment().add(2, 'hours').toDate(),\r\n//     notes: 'Comprar la tarta',\r\n//     user: {\r\n//         _id: '123',\r\n//         name: 'Agustín'\r\n//     }\r\n// }\r\n\r\nconst initialState = {\r\n    events: [],\r\n    activeEvent: null\r\n}\r\n\r\nexport const calendarReducer = ( state = initialState, action ) => {\r\n\r\n    switch ( action.type ) {\r\n\r\n        case types.eventSetActive:\r\n            \r\n            return {\r\n                ...state,\r\n                activeEvent: action.payload\r\n            }\r\n\r\n        case types.eventAddNew:\r\n        \r\n            return {\r\n                ...state,\r\n                events: [\r\n                    ...state.events,\r\n                    action.payload\r\n                ]\r\n            }\r\n        \r\n        case types.eventClearActiveEvent:\r\n    \r\n            return {\r\n                ...state,\r\n                activeEvent: null\r\n            }\r\n\r\n        case types.eventUpdated:\r\n\r\n            return {\r\n                ...state,\r\n                events: state.events.map(\r\n                    e => ( e.id === action.payload.id ) ? action.payload : e\r\n                )\r\n            }\r\n\r\n        case types.eventDeleted:\r\n\r\n            return {\r\n                ...state,\r\n                events: state.events.filter(\r\n                    e => ( e.id !== state.activeEvent.id ) // Filtramos el evento que conincide con el evento activo\r\n                ),\r\n                activeEvent: null // limpiamos el evento activo\r\n            }\r\n\r\n        case types.eventsLoaded:\r\n\r\n            return {\r\n                ...state,\r\n                events: [ ...action.payload ]\r\n            }\r\n\r\n        case types.eventLogout: \r\n\r\n            return {\r\n                ...initialState\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n\r\nconst initialState = {\r\n   checking: true,\r\n//    uid: null,\r\n//    name: null\r\n}\r\n\r\nexport const authReducer = ( state = initialState, action ) => {\r\n   \r\n    switch ( action.type ) {\r\n\r\n        case types.authLogin:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false,\r\n            }\r\n\r\n        case types.authCheckingFinish:\r\n\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n            }\r\n    \r\n        case types.authLogout:\r\n\r\n            return {\r\n                checking: false,\r\n            }\r\n\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { uiReducer } from './uiReducer';\r\nimport { calendarReducer } from './calendarReducer';\r\nimport { authReducer } from './authReducer';\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    calendar: calendarReducer,\r\n    auth: authReducer\r\n})\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { rootReducer } from '../reducers/rootReducer';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n)","import { useState } from 'react';\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}\r\n","const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n\r\n\r\nconst fetchSinToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    // Definimos la Url Api a usar\r\n    const url = `${ baseUrl }/${ endpoint }`;\r\n\r\n    // Si el método es GET, directamente devolvemos la petición\r\n    if ( method === 'GET' ) { // peticion GET\r\n        return fetch( url );\r\n    }\r\n    else { // Resto de peticiones: POST, PUT, DELETE\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify( data )\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst fetchConToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    // Definimos la Url Api a usar\r\n    const url = `${ baseUrl }/${ endpoint }`;\r\n\r\n    // Recuperamos el token del localStorage\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    // Si el método es GET, directamente devolvemos la petición\r\n    if ( method === 'GET' ) { // peticion GET\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'x-token': token\r\n            },\r\n            body: JSON.stringify( data )\r\n        } );\r\n    }\r\n    else { // Resto de peticiones: POST, PUT, DELETE\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'x-token': token\r\n            },\r\n            body: JSON.stringify( data )\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {\r\n    fetchSinToken,\r\n    fetchConToken,\r\n}","import moment from \"moment\";\r\n\r\n\r\nexport const prepareEvents = ( events = [] ) => {\r\n\r\n    // Convertimos las fechas start y end de formato text a formato Date() para el calendario con moment\r\n    return events.map( e => ({\r\n        ...e,\r\n        start: moment( e.start ).toDate(),\r\n        end: moment( e.end ).toDate()\r\n    }) );\r\n\r\n}\r\n","import Swal from \"sweetalert2\";\r\n\r\nimport { types } from \"../types/types\";\r\nimport { fetchConToken } from \"../helpers/fetch\";\r\nimport { prepareEvents } from \"../helpers/prepareEvents\";\r\n\r\n\r\n\r\nexport const startAddNew = ( event ) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const { uid, name } = getState().auth;\r\n        \r\n        try {\r\n\r\n            // Grabamos el evento en la BD\r\n            const resp = await fetchConToken( 'events', event , 'POST');\r\n            const body = await resp.json();\r\n            \r\n            if ( body.ok ) { // el evento se ha grabado correctamente en la BD\r\n                // Añadimos los campos que faltan\r\n                event.id = body.evento.id;\r\n                event.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                };\r\n\r\n                // Disparamos el evento eventAddNew para grabarlo en el store\r\n                dispatch( eventAddNew( event ) );\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nconst eventAddNew = ( event ) => ({\r\n     type: types.eventAddNew,\r\n     payload: event\r\n});\r\n\r\nexport const eventSetActive = ( event ) => ({\r\n    type: types.eventSetActive,\r\n    payload: event\r\n});\r\n\r\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent });\r\n\r\nexport const eventStartUpdate = ( event ) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        // const { uid, name } = getState().auth;\r\n        \r\n        try {\r\n\r\n            // Actualizamos el evento en la BD\r\n            const resp = await fetchConToken( `events/${ event.id }`, event , 'PUT');\r\n            const body = await resp.json();\r\n            \r\n            if ( body.ok ) { // el evento se ha grabado correctamente en la BD\r\n                // Disparamos el evento eventAddNew para grabarlo en el store\r\n                dispatch( eventUpdated( event ) );\r\n            }\r\n            else {\r\n                // Error al intentar actualizar\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nconst eventUpdated = ( event ) => ({\r\n    type: types.eventUpdated,\r\n    payload: event\r\n});\r\n\r\nexport const eventStartDeleted = () => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const { activeEvent } = getState().calendar;\r\n        // console.log( activeEvent );\r\n        \r\n        try {\r\n\r\n            // Actualizamos el evento en la BD\r\n            const resp = await fetchConToken( `events/${ activeEvent.id }`, {} , 'DELETE');\r\n            const body = await resp.json();\r\n            \r\n            if ( body.ok ) { // el evento se ha grabado correctamente en la BD\r\n                // Disparamos el evento eventAddNew para grabarlo en el store\r\n                dispatch( eventDeleted() );\r\n            }\r\n            else {\r\n                // Error al intentar actualizar\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst eventDeleted = () => ({ type: types.eventDeleted });\r\n\r\nexport const eventStartLoading = () => {\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n\r\n            // Recuperamos todos los eventos de la BD\r\n            const resp = await fetchConToken( 'events' );\r\n            const body = await resp.json();\r\n\r\n            const events = prepareEvents( body.eventos );\r\n            console.log(events);\r\n\r\n            // Disparamos el evento eventsLoaded para grabarlos en el store\r\n            dispatch( eventsLoaded( events ) );\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n       \r\n\r\n\r\n    }\r\n}\r\n\r\nconst eventsLoaded = ( events ) => ({\r\n    type: types.eventsLoaded,\r\n    payload: events\r\n});\r\n\r\nexport const eventLogout = () => ({ type: types.eventLogout });","import Swal from \"sweetalert2\";\r\nimport { fetchSinToken, fetchConToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\nimport { eventLogout } from \"./events\";\r\n\r\n\r\n\r\nexport const startLogin = ( email, password ) => {\r\n\r\n    return async ( dispatch ) => {\r\n\r\n        const resp = await fetchSinToken( 'auth', { email, password }, 'POST' );\r\n        // Como fetch devuelve una promesa, lo recuperamos con await también\r\n        const body = await resp.json();\r\n\r\n        // Comprobamos que el campo body.ok de la respuesta sea true y grabamos el token en el localStorage\r\n        if ( body.ok ) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            // Grabamos los datos del login de usuario en el store, haciendo el dispatch de la accion login\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) );\r\n\r\n        }\r\n        else { // mostramos un error\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const startRegister = ( email, password, name ) => {\r\n\r\n    return async ( dispatch ) => {\r\n\r\n        const resp = await fetchSinToken( 'auth/new', { email, password, name }, 'POST' );\r\n        // Como fetch devuelve una promesa, lo recuperamos con await también\r\n        const body = await resp.json();\r\n\r\n        // Comprobamos que el campo body.ok de la respuesta sea true y grabamos el token en el localStorage\r\n        if ( body.ok ) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            // Grabamos los datos del login de usuario en el store, haciendo el dispatch de la accion login\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) );\r\n\r\n        }\r\n        else { // mostramos un error\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const startChecking = () => {\r\n    return async(dispatch) => {\r\n\r\n        const resp = await fetchConToken( 'auth/renew' );\r\n        // Como fetch devuelve una promesa, lo recuperamos con await también\r\n        const body = await resp.json();\r\n\r\n        // Comprobamos que el campo body.ok de la respuesta sea true y grabamos el token en el localStorage\r\n        if ( body.ok ) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n            // Grabamos los datos del login de usuario en el store, haciendo el dispatch de la accion login\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) );\r\n\r\n        }\r\n        else { // mostramos un error\r\n            // Disparamos la accion para finalizar el checking\r\n            dispatch( checkingFinish() );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const checkingFinish = () => ({ type: types.authCheckingFinish });\r\n\r\nexport const startLogout = () => {\r\n    return ( dispatch ) => {\r\n\r\n        // Borramos el localStorage\r\n        localStorage.clear();\r\n\r\n        // Ejecutamos el borrado de datos del store del calendar\r\n        dispatch( eventLogout() );\r\n\r\n        // Ejecutamos el borrado de datos del store del auth\r\n        dispatch( logout() );\r\n\r\n    }\r\n}\r\n\r\nexport const logout = () => ({ type: types.authLogout });\r\n\r\nconst login = ( user ) => ({\r\n    type: types.authLogin,\r\n    payload: user\r\n});","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport validator from 'validator';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { startLogin, startRegister } from '../../actions/auth';\r\nimport './login.css';\r\n\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    // Hook de react-redux para poder hacer el dispatch\r\n    const dispatch = useDispatch ();\r\n\r\n    // Custom hook useForm para el login\r\n    const [ formLoginValues, handleLoginInputChange ] = useForm({\r\n        lEmail: 'agustindomin@gmail.com',\r\n        lPassword: '123456'\r\n    });\r\n\r\n    // Custom hook useForm para el registro\r\n    const [ formRegisterValues, handleRegisterInputChange ] = useForm({\r\n        rName: 'agustín Domin',\r\n        rEmail: 'agustindo@gmail.com',\r\n        rPassword1: '123456',\r\n        rPassword2: '123456'\r\n    });\r\n\r\n    // Desestructuramos los campos\r\n    const { lEmail, lPassword } = formLoginValues;\r\n    const { rName, rEmail, rPassword1, rPassword2 } = formRegisterValues;\r\n\r\n    // Manejadores submit\r\n    const handleLogin = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        // Validamos lEmail\r\n        if ( !validator.isEmail(lEmail) ) {\r\n            return Swal.fire({\r\n                title: 'Email error',\r\n                text: 'El email introducido no es válido',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n\r\n        // Validamos lPassword\r\n        if ( !validator.isLength( lPassword, 6 ) ) {\r\n            return Swal.fire({\r\n                title: 'Password error',\r\n                text: 'El password ha de tener 6 caracteres como minimo',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n\r\n        // Disparamos la accion\r\n        dispatch( startLogin( lEmail, lPassword ) );\r\n\r\n    }\r\n\r\n    const handleRegister = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        // Validamos rName\r\n        if ( validator.isEmpty(rName) ) {\r\n            return Swal.fire({\r\n                title: 'Name error',\r\n                text: 'El name es obligatorio',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n\r\n        // Validamos rEmail\r\n        if ( !validator.isEmail(rEmail) ) {\r\n            return Swal.fire({\r\n                title: 'Email error',\r\n                text: 'El email introducido no es válido',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n\r\n        // Validamos rPassword1\r\n        if ( !validator.isLength( rPassword1, 6 ) ) {\r\n            return Swal.fire({\r\n                title: 'Password error',\r\n                text: 'El password ha de tener 6 caracteres como minimo',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n        // Validamos qeu las password coinciden\r\n        if ( rPassword1 !== rPassword2 ) {\r\n            return Swal.fire({\r\n                title: 'Passwords error',\r\n                text: 'Las contraseñas no coinciden',\r\n                icon: 'error',\r\n                showCloseButton: true,\r\n            });\r\n        }\r\n\r\n        // Disparamos la accion\r\n        dispatch( startRegister( rEmail, rPassword1, rName ) );\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container login-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 login-form-1\">\r\n                    <h3>Ingreso</h3>\r\n                    <form onSubmit={ handleLogin }>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"lEmail\"\r\n                                value={ lEmail }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\"\r\n                                name=\"lPassword\"\r\n                                value={ lPassword }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"submit\"\r\n                                className=\"btnSubmit\"\r\n                                value=\"Login\" \r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"col-md-6 login-form-2\">\r\n                    <h3>Registro</h3>\r\n                    <form onSubmit={ handleRegister }>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nombre\"\r\n                                name=\"rName\"\r\n                                value={ rName }\r\n                                onChange={ handleRegisterInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"rEmail\"\r\n                                value={ rEmail }\r\n                                onChange={ handleRegisterInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\" \r\n                                name=\"rPassword1\"\r\n                                value={ rPassword1 }\r\n                                onChange={ handleRegisterInputChange }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Repita la contraseña\" \r\n                                name=\"rPassword2\"\r\n                                value={ rPassword2 }\r\n                                onChange={ handleRegisterInputChange }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"submit\" \r\n                                className=\"btnSubmit\" \r\n                                value=\"Crear cuenta\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { eventLogout } from '../../actions/events';\r\n\r\nexport const Navbar = () => {\r\n\r\n\r\n    // TAREA: poner el nombre del usuario logueado\r\n    // Leemos el store para recuperar el nombre del usuario logueado\r\n    const { name } = useSelector(state => state.auth)\r\n\r\n    // Definimos el dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // Manejador del logout\r\n    const handleLogout = () => {\r\n\r\n        dispatch( startLogout() );\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n            <span className=\"navbar-brand\">\r\n                { name }\r\n            </span>\r\n            \r\n            <button\r\n                className=\"btn btn-outline-danger\"\r\n                onClick={ handleLogout }\r\n            >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                <span> Salir</span>\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n","export const messages = {\r\n    allDay: 'Todo el día',\r\n    previous: '<',\r\n    next: '>',\r\n    today: 'Hoy',\r\n    month: 'Mes',\r\n    week: 'Semana',\r\n    day: 'Día',\r\n    agenda: 'Agenda',\r\n    date: 'Fecha',\r\n    time: 'Hora',\r\n    event: 'Evento',\r\n    noEventsInRange: 'No hay eventos en este rango',\r\n    showMore: total => `+ Ver más (${total})`\r\n};","import React from 'react';\r\n\r\n// Recibe todo el evento\r\nexport const CalendarEvent = ({ event }) => {\r\n    // console.log(event);\r\n\r\n    // Extraemos los datos del event\r\n    const { title, user } = event;\r\n\r\n    return (\r\n        <div>\r\n            <strong> { title } </strong>\r\n            <span>- { user.name } </span>\r\n        </div>\r\n    )\r\n};\r\n","import { types } from \"../types/types\";\r\n\r\n\r\nexport const uiOpenModal = () => ({ type: types.uiOpenModal });\r\n\r\nexport const uiCloseModal = () => ({ type: types.uiCloseModal });","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport Modal from 'react-modal';\r\nimport DateTimePicker from 'react-datetime-picker';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { uiCloseModal } from '../../actions/ui';\r\nimport { eventClearActiveEvent, eventStartUpdate, startAddNew } from '../../actions/events';\r\n\r\n\r\n\r\n\r\n// Estilos del Modal\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n// Enlazamos el Modal con el id=\"root\" del index.html\r\nModal.setAppElement('#root');\r\n\r\n// Valores iniciales de DatePicker\r\nconst now = moment().minute(0).second(0).add(1,'hours');\r\nconst nowPlus1 = now.clone().add(1, 'hours');\r\n\r\n// Definimos lo estructura inicial de un evento\r\nconst initEvent = {\r\n    title: '',\r\n    notes: '',\r\n    start: now.toDate(),\r\n    end: nowPlus1.toDate()\r\n} \r\n\r\n\r\n\r\nexport const CalendarModal = () => {\r\n\r\n    // Para recuperar los datos del state usamos el hook useSelector\r\n    const { modalOpen } = useSelector ( state => state.ui );\r\n    const { activeEvent } = useSelector ( state => state.calendar );\r\n\r\n    // Hook de react-redux para poder hacer el dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // StartDate y EndDate del datePicker\r\n    // const [ setDateStart ] = useState( now.toDate() );\r\n    // const [ setDateEnd ] = useState( nowPlus1.toDate() );\r\n    const [ titleValid, setTitleValid ] = useState(true);\r\n\r\n    // Estado del formulario\r\n    const [formValues, setFormValues] = useState( initEvent ); // initEvent: Evento vacío inicial\r\n\r\n    // valores de formulario\r\n    const { title, notes, start, end } = formValues;\r\n\r\n    // useEffect pendiente de los cambios en  activeEvent\r\n    useEffect(() => {\r\n        \r\n        // Comprobamos que exista el activeEvent y entonces le pasamos sus datos al formulario\r\n        if ( activeEvent ) {\r\n            setFormValues( activeEvent );\r\n        }\r\n        else {\r\n            setFormValues( initEvent );\r\n        }\r\n        \r\n    }, [activeEvent, setFormValues]);\r\n\r\n    // Manejador de cambios en campos del formulario\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value\r\n        });\r\n\r\n    };\r\n\r\n    // Manejador eventos del Modal\r\n    const closeModal = () => {\r\n        // console.log('Closing...');\r\n        dispatch( uiCloseModal() );\r\n        // limpiamos el activeEvent\r\n        dispatch( eventClearActiveEvent() );\r\n        // limpiamos el formulario de datos\r\n        setFormValues( initEvent );\r\n        \r\n    }\r\n\r\n    // Manejadores eventos DatePicker\r\n    const handleStartDateChange = (e) => {\r\n        // setDateStart(e);\r\n        setFormValues({\r\n            ...formValues,\r\n            start: e\r\n        });\r\n    }\r\n    const handleEndDateChange = (e) => {\r\n        // setDateEnd(e);\r\n        setFormValues({\r\n            ...formValues,\r\n            end: e\r\n        });\r\n    }\r\n\r\n    // Manejador evento onSubmit del formulario\r\n    const handleSubmitForm = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        // Validaciones\r\n\r\n        const momentStart = moment( start );\r\n        const momentEnd = moment( end );\r\n\r\n        // Horas\r\n        if ( momentStart.isSameOrAfter( momentEnd ) ) {\r\n            // Mostramos mensaje al usuario con Swal\r\n            return Swal.fire('Error', 'La fecha fin ha de ser mayor a la fecha de inicio', 'error');\r\n        }\r\n\r\n        // Titulo\r\n        if ( title.trim().length < 2 ) {\r\n            return setTitleValid( false );\r\n        }\r\n\r\n        // TODO: Grabar los datos en la BBDD\r\n        // Si llegamos aquí enviamos el formulario\r\n        // Si activeEvent es null ===> esun nuevo evento, si tiene valor es una actualizacion de un evento\r\n        if ( activeEvent )  { // Actualizamos el evento\r\n            dispatch( eventStartUpdate( formValues ) );\r\n        }\r\n        else { // Creamos un nuevo evento\r\n            dispatch( startAddNew( formValues ) );\r\n        }\r\n\r\n        setTitleValid(true);\r\n\r\n        closeModal();\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n          isOpen={ modalOpen }\r\n        //   onAfterOpen={afterOpenModal}\r\n          onRequestClose={ closeModal }\r\n          style={ customStyles }\r\n          closeTimeoutMS={ 200 }\r\n          className=\"modal\"\r\n          overlayClassName=\"modal-fondo\"\r\n        >\r\n            <h1> { (activeEvent) ? 'Editar evento' : 'Nuevo evento' } </h1>\r\n            <hr />\r\n            <form\r\n                className=\"container\"\r\n                onSubmit={ handleSubmitForm }\r\n            >\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora inicio</label>\r\n                    <DateTimePicker\r\n                        name=\"start\"\r\n                        onChange={ handleStartDateChange }\r\n                        value={ start }\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora fin</label>\r\n                    <DateTimePicker\r\n                        name=\"end\"\r\n                        onChange={ handleEndDateChange }\r\n                        value={ end }\r\n                        minDate={ start }\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n\r\n                <hr />\r\n                <div className=\"form-group\">\r\n                    <label>Titulo y notas</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className={ `form-control ${ !titleValid && 'is-invalid' }` }\r\n                        placeholder=\"Título del evento\"\r\n                        name=\"title\"\r\n                        value={ title }\r\n                        autoComplete=\"off\"\r\n                        onChange={ handleInputChange }\r\n                    />\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <textarea \r\n                        type=\"text\" \r\n                        className=\"form-control\"\r\n                        placeholder=\"Notas\"\r\n                        rows=\"3\"\r\n                        name=\"notes\"\r\n                        value={ notes }\r\n                        onChange={ handleInputChange }\r\n                    ></textarea>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary btn-block\"\r\n                >\r\n                    <i className=\"far fa-save\"></i>\r\n                    <span> Guardar</span>\r\n                </button>\r\n\r\n            </form>\r\n\r\n        </Modal>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { uiOpenModal } from '../../actions/ui';\r\n\r\nexport const AddNewFab = () => {\r\n\r\n    // Hook de react-redux para poder hacer el dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // Manejadores eventos\r\n    const handleClickNew = () => {\r\n        // Hacemos el dispatch de la acción uiOpenModal\r\n        dispatch( uiOpenModal() );\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-primary fab\"\r\n            onClick={ handleClickNew }\r\n        >\r\n            <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { eventStartDeleted } from '../../actions/events';\r\n\r\nexport const DeletedEventFab = () => {\r\n\r\n    // Hook de react-redux para poder hacer el dispatch\r\n    const dispatch = useDispatch ();\r\n\r\n    // Manejadores eventos\r\n    const handleDelete = () => {\r\n        // Hacemos el dispatch de la acción eventDeleted\r\n        dispatch( eventStartDeleted() );\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-danger fab-danger\"\r\n            onClick={ handleDelete }\r\n        >\r\n            <i className=\"fas fa-trush\"></i>\r\n            <span> Borrar evento</span>\r\n        </button>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Calendar, momentLocalizer }from 'react-big-calendar';\r\nimport moment from 'moment'; // paquete para manejar fechas, tiempos, etc\r\n\r\n\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { messages } from '../../helpers/calendar-messages-es'; // Mensajes en español del Calendar\r\nimport { CalendarEvent } from './CalendarEvent';\r\nimport { CalendarModal } from './CalendarModal';\r\nimport { uiOpenModal } from '../../actions/ui';\r\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/events';\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\n\r\n// Estilos del Calendar\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\n\r\n// Ponemos configuracion de moment en español\r\nimport 'moment/locale/es'; // obtenemos el idioma español\r\nimport { DeletedEventFab } from '../ui/DeletedEventFab';\r\n\r\n\r\n\r\nmoment.locale('es'); // Lo ponemos en español\r\n\r\n// Setup the localizer by providing the moment (or globalize) Object to the correct localizer.\r\nconst localizer = momentLocalizer(moment) // or globalizeLocalizer\r\n\r\n// Definimos los eventos para el Calendar\r\n// const events = [{\r\n//     title: 'Cumpleaños del jefe',\r\n//     start: moment().toDate(),\r\n//     end: moment().add(2, 'hours').toDate(),\r\n//     bgcolor: '#fafafa',\r\n//     notes: 'Comprar la tarta',\r\n//     user: {\r\n//         id: '123',\r\n//         name: 'Agustín'\r\n//     }\r\n// }]\r\n\r\n\r\nexport const CalendarScreen = () => {\r\n\r\n\r\n\r\n    // Hook de react-redux para poder hacer el dispatch\r\n    const dispatch = useDispatch();   \r\n    \r\n    // TAREA: Leer los eventos almacenados en el store\r\n    const { events, activeEvent } = useSelector( state => state.calendar );\r\n\r\n    // Leemos el uid del usuario logueado\r\n    const { uid }  = useSelector( state => state.auth );\r\n\r\n    // useState para recuperar la View de donde estábamos si existe y si no el ponemos Vista mes\r\n    const [lastView, setLastView] = useState( localStorage.getItem('lastView') || 'month' );\r\n\r\n    // Cargamos eventos guardado en la BD si los hay\r\n    useEffect(() => {\r\n        \r\n        dispatch( eventStartLoading() );\r\n\r\n    }, [ dispatch ]);\r\n\r\n    // Gestion de eventos del Calendar\r\n    const onDoubleClick = (e) => {\r\n        // console.log(e);\r\n        // Hacemos el dispatch de la acción uiOpenModal\r\n        dispatch( uiOpenModal() ); // Abrimos el modal\r\n    }\r\n    const onSelectEvent = (e) => {\r\n        // console.log(e);\r\n        dispatch( eventSetActive(e) ); // Lo ponemos activo\r\n    }\r\n    const onViewChange = (e) => {\r\n        //Actualizamos la view\r\n        setLastView(e);\r\n        // grabamos la última vista en el localStorage\r\n        localStorage.setItem('lastView', e);\r\n    }\r\n\r\n    const onSelectSlot = (e) => {\r\n        // console.log(e);\r\n\r\n        // TODO: abrir el modal para agrgar un evento nuevo\r\n\r\n        // Ponemos activeEvent null\r\n        dispatch( eventClearActiveEvent() );\r\n    }\r\n\r\n    // Aplicamos estilos personalizados en los eventos del calendar\r\n    const eventStyleGetter = ( event, start, end, isSelected ) => {\r\n        // console.log( event, start, end, isSelected );\r\n\r\n        const style = {\r\n            backgroundColor: ( uid === event.user._id ) ? '#367CF7' : '#465660',\r\n            borderRadius: '0px',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: 'white'\r\n        }\r\n\r\n        return { style };\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"calendar-screen\">\r\n\r\n            <Navbar />\r\n\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={ events }\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                messages={ messages } // mensaje en español\r\n                eventPropGetter={ eventStyleGetter } // estilos personalizados\r\n                onDoubleClickEvent={ onDoubleClick } // evento\r\n                onSelectEvent={ onSelectEvent } // evento\r\n                onView={ onViewChange } // evento\r\n                onSelectSlot={ onSelectSlot }\r\n                selectable={ true }\r\n                view={ lastView } // Vista por defecto\r\n                components={ // Podemos personalizar todos los elementos del calendar y mandarle por referencia nuestros componentes\r\n                    {\r\n                        event: CalendarEvent\r\n                    }\r\n\r\n                }\r\n            />\r\n\r\n                { \r\n                    (activeEvent) && <DeletedEventFab />\r\n                }\r\n                \r\n                <AddNewFab />\r\n\r\n            <CalendarModal />\r\n    \r\n        </div> \r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isLoggedIn,\r\n    component: Component, // Lo renombramos a Mayusculas porque es un Componente a renderizar\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route { ...rest } // Ponemos el resto de parametros del Route; path, exact, etc\r\n            component={ ( props ) => (// Lo llamamos en plan callback y le pasamos las props: history, etc\r\n\r\n                ( isLoggedIn ) // vemos si está autenticado\r\n                    ? <Redirect to=\"/\" /> // lo redirigimos a la página principal\r\n                    : <Component { ...props } /> // retornamos el componente \r\n                    \r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n// Ponemos los PropsTypes\r\nPublicRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PrivateRoute = ({\r\n    isLoggedIn,\r\n    component: Component, // Lo renombramos a Mayusculas porque es un Componente a renderizar\r\n    ...rest\r\n}) => {\r\n\r\n    // // Grabamos la última página visitada en el localStorage\r\n    // localStorage.setItem('lastPath', rest.location.pathname);\r\n\r\n    return (\r\n        <Route { ...rest } // Ponemos el resto de parametros del Route; path, exact, etc\r\n            component={ ( props ) => (// Lo llamamos en plan callback y le pasamos las props: history, etc\r\n\r\n                ( isLoggedIn ) // vemos si está autenticado\r\n                    ? <Component { ...props } /> // retornamos el componente\r\n                    : <Redirect to=\"/login\" /> // lo redirigimos al login\r\n\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n// Ponemos los PropsTypes\r\nPrivateRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React, { useEffect } from 'react';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { CalendarScreen } from '../components/calendar/CalendarScreen';\r\nimport { startChecking } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n        {/* \r\n            TAREA: definir las siguientes RUTAS\r\n\r\n            // exact /login - componente LoginScreen\r\n            // exact / - componente CalendarScrenn\r\n        */}\r\n\r\n    // Definimos el dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // Leemos el checking del store\r\n    const { checking, uid } = useSelector(state => state.auth);\r\n\r\n    // Usamos useEffect para comprobar el checking\r\n    useEffect(() => {\r\n        \r\n        dispatch( startChecking() );\r\n\r\n    }, [dispatch]);\r\n\r\n    // Mostramos mensaje hasta que se haga el checking\r\n    if ( checking ) {\r\n         return (<h5>Espere...</h5>);\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n\r\n                    <PublicRoute\r\n                        exact\r\n                        path=\"/login\"\r\n                        component={ LoginScreen }\r\n                        isLoggedIn={ !!uid } // Convertimos la cadena uid en valor booleano\r\n                    />\r\n                \r\n                    <PrivateRoute\r\n                        exact\r\n                        path=\"/\"\r\n                        component={ CalendarScreen }\r\n                        isLoggedIn={ !!uid } // Convertimos la cadena uid en valor booleano\r\n                    />\r\n\r\n                    <Redirect to=\"/\" />\r\n                \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nimport { store } from './store/store';\r\nimport { AppRouter } from './router/AppRouter';\r\n\r\nexport const CalendarApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalendarApp } from './CalendarApp';\n\nimport './styles.css';\n\nReactDOM.render(\n    <CalendarApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}